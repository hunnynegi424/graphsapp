{"version":3,"sources":["components/Colors/index.js","App.js","actions/index.js","serviceWorker.js","reducers/index.js","reducers/NewItem.js","store/index.js","index.js"],"names":["colorArray","shuffle","App","props","state","chartData","target","e","keyCode","this","inputQty","focus","submit","inputItem","pattern","RegExp","test","value","isEmpty","Item","charAt","toUpperCase","slice","dispatch","type","item","qty","alert","getData","response","NewItem","forEach","keys","Object","values","setState","labels","datasets","label","data","backgroundColor","options","console","log","counter","className","style","fontSize","color","margin","ref","onKeyUp","bind","placeholder","onClick","map","tooltip","fontWeight","cursor","width","height","legend","display","position","React","Component","connect","Boolean","window","location","hostname","match","combineReducers","action","store","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4699f8ff.chunk.js","sourcesContent":["import shuffle from 'lodash/shuffle';\r\nconst colors = ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6', \r\n\t\t  '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n\t\t  '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A', \r\n\t\t  '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\r\n\t\t  '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC', \r\n\t\t  '#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399',\r\n\t\t  '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680', \r\n\t\t  '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\r\n\t\t  '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3', \r\n\t\t  '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF'];\r\n\r\nconst colorArray = shuffle(colors);\r\nexport default colorArray;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Doughnut, Line } from 'react-chartjs-2';\nimport isEmpty from 'lodash/isEmpty';\nimport colorArray from './components/Colors';\nimport './App.css';\nimport {addItem} from './actions';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state ={\n      chartData: {},\n    }\n  }\n\n  onKeyUp(target, e) {\n    if(e.keyCode === 13) {\n      switch (target) {\n        case 'item':\n          this.inputQty.focus();\n          break;\n        case 'qty':\n          this.submit.focus();\n          break;\n        case 'submit':\n          this.inputItem.focus();\n          break;\n        default:\n        break;\n      }\n    }\n  }\n\n  async onClick() {\n    const pattern = new RegExp(/^[0-9]*$/);\n    const value = pattern.test(this.inputQty.value);\n    if (value) {\n      if(!isEmpty(this.inputItem.value) && !isEmpty(this.inputQty.value)){\n        const Item = this.inputItem.value.charAt(0).toUpperCase() + this.inputItem.value.slice(1);\n        await this.props.dispatch(addItem({item: Item, qty: this.inputQty.value}));\n        this.inputItem.value = '';\n        this.inputQty.value = '';\n      } else {\n        alert(\"Fields cannot be empty.\");  \n      }\n    } else {\n      this.inputQty.value = '';\n      alert(\"Quantity should be a number.\");\n      this.inputQty.focus();\n    }\n    this.getData();\n  }\n\n  getData() {\n    let response = {};\n    this.props.NewItem.forEach(({item, qty}) => {\n      response[item] = qty;\n    });\n    const keys = Object.keys(response);\n    const values = Object.values(response);\n    this.setState({\n        chartData: {\n          labels: keys,\n          datasets: [\n            {\n              label: \"Items as per Quantity\",\n              data: values,\n              backgroundColor: colorArray,\n            }\n          ],\n          options: {\n            \n          }\n        }\n      }, ()=> console.log('state', this.state))\n  }\n\n  render() {\n    let counter = 1;\n    return (\n      <div className=\"App\">\n        <span className=\"table1\">\n          <div style={{ fontSize: 50, color: 'white', margin: 10 }}>Inventory</div>\n          <input\n            type=\"text\"\n            ref={e => this.inputItem = e}\n            onKeyUp={this.onKeyUp.bind(this, \"item\")}\n            placeholder=\"Enter an item\"\n            className=\"inputCell\"\n            />\n          <input\n            type=\"text\"\n            ref={e => this.inputQty = e}\n            onKeyUp={this.onKeyUp.bind(this, \"qty\")}\n            placeholder=\"Enter Quantity\"\n            className=\"inputCell\"\n            />\n          <button\n            ref={e => this.submit = e}\n            className=\"addBtn\"\n            onClick={()=> this.onClick()}\n            onKeyUp={this.onKeyUp.bind(this, \"submit\")}\n          >+</button>\n          {this.props.NewItem.map(e => (\n            <div className=\"list\">\n              <span style={{ color: \"white\"}}>\n                {counter++}.\n              </span>\n              <span className=\"cell\">\n                {e.item}\n              </span>\n              <span className=\"cell\">\n                {e.qty}\n              </span>\n              <span tooltip=\"Delete\" style={{ fontWeight: 'bolder', cursor: 'pointer', color: 'white'}}>\n                x\n              </span>\n            </div>\n          ))}\n        </span>\n        <span className=\"table2\">\n          <div className=\"row\">\n            <div className=\"chart\">\n              {this.props.NewItem && <Doughnut\n                data={this.state.chartData}\n                width= {400}\n                height= {300}\n                options={{\n                  legend: {\n                    display: true,\n                    position: 'bottom',\n                  }\n                }}\n              />}\n            </div>\n          </div>\n          <div className=\"row\">\n          <div className=\"chart\">\n            {this.props.NewItem !== [] && <Line\n              data={this.state.chartData}\n              width= {400}\n              height= {300}\n              options={{\n                legend: {\n                  display: true,\n                  position: 'bottom',\n                }\n              }}\n            />}\n          </div>\n          </div>\n        </span>\n      </div>\n    );\n  }\n}\n\nconst mapSTateToProps = state => state;\n\nexport default connect(mapSTateToProps)(App);\n","export const NEW_ITEM = 'NEW_ITEM'\r\n\r\nexport const addItem = (item) => ({\r\n    type: NEW_ITEM,\r\n    item,\r\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport NewItem from './NewItem';\r\n\r\nexport default combineReducers({\r\n    NewItem,\r\n})","import { NEW_ITEM } from '../actions';\r\n\r\nexport default (state = [], action) => {\r\nif(action.type === NEW_ITEM) {\r\n    return [...state, action.item];\r\n}\r\nreturn state;\r\n}","import { createStore } from 'redux';\r\nimport reducers from '../reducers';\r\n\r\nconst store = createStore(\r\n    reducers,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    );\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}